import { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import Header from '../components/Header';
import ImageUpload from '../components/ImageUpload';
import AnalysisResults from '../components/AnalysisResults';
import Disclaimer from '../components/Disclaimer';
import { useSelector } from 'react-redux';

function AnalysisBotECG() {
    const [selectedImage, setSelectedImage] = useState(null);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [analysis, setAnalysis] = useState(null);
    const [logoImage, setLogoImage] = useState(null);
    const { user, loading, isAuthenticated } = useSelector(state => state.user);
    const fileInputRef = useRef(null);

    // Load logo image when component mounts
    useEffect(() => {
        const loadLogo = async () => {
            try {
                const img = new Image();
                img.src = '/logo.png';
                await new Promise((resolve, reject) => {
                    img.onload = resolve;
                    img.onerror = reject;
                });
                setLogoImage(img);
            } catch (error) {
                console.error('Error loading logo:', error);
            }
        };
        loadLogo();
    }, []);

    // Function to upload image to Cloudinary
    const uploadToCloudinary = async (file) => {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('upload_preset', 'teleconnect'); // Replace with your Cloudinary preset

        try {
            const response = await axios.post(
                'https://api.cloudinary.com/v1_1/dfwzeazkg/image/upload', // Replace with your Cloudinary cloud name
                formData
            );
            return response.data.secure_url;
        } catch (error) {
            console.error('Error uploading to Cloudinary:', error);
            throw error;
        }
    };

    // Handle file selection and upload
    const handleImageUpload = async (event) => {
        const file = event.target.files?.[0];
        if (file) {
            try {
                const reader = new FileReader();
                reader.onloadend = () => setSelectedImage(reader.result);
                reader.readAsDataURL(file);

                const cloudinaryUrl = await uploadToCloudinary(file);
                await analyzeImage(cloudinaryUrl);
            } catch (error) {
                console.error('Error handling image upload:', error);
                setAnalysis("Error uploading image.");
            }
        }
    };

    // Analyze the uploaded ECG image
    const analyzeImage = async (imageUrl) => {
        setIsAnalyzing(true);
        setAnalysis(null);

        try {
            const response = await fetch('http://127.0.0.1:8001/ecg', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ file_path: imageUrl }),
            });

            const data = await response.json();
            if (response.ok) {
                setAnalysis(data.prediction);
            } else {
                setAnalysis("Error: " + (data.error || "Unexpected response"));
            }
        } catch (error) {
            console.error('Error processing the image:', error);
            setAnalysis("Error processing the image.");
        } finally {
            setIsAnalyzing(false);
        }
    };

    // Generate PDF report
    const generatePDF = () => {
        if (!analysis) {
            alert("No analysis data available to generate PDF.");
            return;
        }

        const doc = new jsPDF();
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const margin = 20;
        let yPosition = margin;

        // Add header with logo and title
        if (logoImage) {
            const logoWidth = 20;
            const logoHeight = 20;
            try {
                doc.addImage(logoImage, 'PNG', margin, 10, logoWidth, logoHeight);
            } catch (error) {
                console.error('Error adding logo to PDF:', error);
            }
        }
        doc.setFontSize(16);
        doc.setFont("helvetica", "bold");
        doc.text("CureConnect - ECG Analysis Report", pageWidth / 2, 20, { align: 'center' });

        // Add footer with logo and text
        const addFooter = () => {
            doc.setFontSize(10);
            doc.setTextColor(128);
            doc.text(
                "Generated by CureConnect",
                pageWidth / 2,
                pageHeight - 10,
                { align: 'center' }
            );
            if (logoImage) {
                try {
                    doc.addImage(logoImage, 'PNG', pageWidth - margin - 20, pageHeight - 15, 10, 10);
                } catch (error) {
                    console.error('Error adding footer logo to PDF:', error);
                }
            }
        };

        // Report Title
        yPosition += 30;
        doc.setFontSize(24);
        doc.setFont("helvetica", "bold");
        doc.text("ECG Analysis Report", pageWidth / 2, yPosition, { align: 'center' });

        // User Details
        yPosition += 30;
        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        doc.text(`Patient Name: ${user.name}`, margin, yPosition);
        yPosition += 10;
        doc.text(`Date: ${new Date().toLocaleString()}`, margin, yPosition);

        // Analysis Results
        yPosition += 20;
        doc.setFontSize(14);
        doc.setFont("helvetica", "bold");
        doc.text("Analysis Results:", margin, yPosition);

        // Format analysis text with proper wrapping
        yPosition += 10;
        doc.setFont("helvetica", "normal");
        doc.setFontSize(12);
        const splitText = doc.splitTextToSize(analysis, pageWidth - (2 * margin));
        
        // Check if text might overflow to next page
        if (yPosition + (splitText.length * 7) > pageHeight - margin) {
            addFooter();
            doc.addPage();
            yPosition = margin;
        }
        
        doc.text(splitText, margin, yPosition);

        // Add footer to the last page
        addFooter();

        // Save the PDF
        doc.save(`ECG_Report_${user.name}_${new Date().toLocaleDateString()}.pdf`);
    };

    // Reset the analysis state
    const resetAnalysis = () => {
        setSelectedImage(null);
        setAnalysis(null);
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
            <div className="max-w-4xl mx-auto px-4 py-8">
                <Header />
                <div className="bg-white rounded-2xl shadow-xl p-6 mb-8">
                    <ImageUpload
                        selectedImage={selectedImage}
                        fileInputRef={fileInputRef}
                        handleImageUpload={handleImageUpload}
                        resetAnalysis={resetAnalysis}
                    />
                    <AnalysisResults
                        isAnalyzing={isAnalyzing}
                        analysis={analysis}
                    />
                    {analysis && (
                        <button
                            onClick={generatePDF}
                            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg"
                        >
                            Download Report
                        </button>
                    )}
                </div>
                <Disclaimer />
            </div>
        </div>
    );
}

export default AnalysisBotECG;